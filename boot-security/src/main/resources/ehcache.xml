<?xml version="1.0" encoding="UTF-8"?>


<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="ehcache.xsd"
         updateCheck="true" monitoring="autodetect"
         dynamicConfig="true">

   
    <diskStore path="java.io.tmpdir"/> <!-- 磁盘缓存位置 -->

    
    <!-- 
    	name:缓存名称。 
        maxElementsInMemory：缓存最大个数。 
        eternal:对象是否永久有效，一但设置了，timeout将不起作用。 
        timeToIdleSeconds：设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。 
        timeToLiveSeconds：设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。 
        overflowToDisk：当内存中对象数量达到maxElementsInMemory时，Ehcache将会对象写到磁盘中。 diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。 
        maxElementsOnDisk：硬盘最大缓存个数。 
        diskPersistent：是否缓存虚拟机重启期数据 Whether the disk 
        store persists between restarts of the Virtual Machine. The default value 
        is false. 
        diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。  memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是 
										 LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。 
        clearOnFlush：内存数量最大时是否清除。 
     -->
     
     
     <!-- 接口2使用 -->
    <cache name="queryPeopleNumByTimeRange"
           eternal="true"
           timeToIdleSeconds="3600"
           timeToLiveSeconds="3600"
           maxEntriesLocalHeap="60000"
           maxEntriesLocalDisk="100000"
           diskSpoolBufferSizeMB="600"
           memoryStoreEvictionPolicy="LFU"
           transactionalMode="off">
        <persistence strategy="localTempSwap"/>
    </cache>
     
    
    <defaultCache
            maxEntriesLocalHeap="10000"
            eternal="false"
            timeToIdleSeconds="120"
            timeToLiveSeconds="120"
            diskSpoolBufferSizeMB="30"
            maxEntriesLocalDisk="10000000"
            diskExpiryThreadIntervalSeconds="120"
            memoryStoreEvictionPolicy="LRU">
        <persistence strategy="localTempSwap"/>
    </defaultCache>
	
    <transactionManagerLookup class="net.sf.ehcache.transaction.manager.DefaultTransactionManagerLookup"
                              properties="jndiName=java:/TransactionManager" propertySeparator=";"/>

   
    <cacheManagerEventListenerFactory class="" properties=""/>


    
    <cacheManagerPeerProviderFactory
            class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
            properties="peerDiscovery=automatic,
                        multicastGroupAddress=230.0.0.1,
                        multicastGroupPort=4446, timeToLive=1"
            propertySeparator=","
            />

   
    <cacheManagerPeerListenerFactory
            class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory"/>
	


   
    <cache name="sampleCache2"
           maxEntriesLocalHeap="1000"
           eternal="true"
           memoryStoreEvictionPolicy="FIFO"
            />


   
    <cache name="sampleCache3"
           maxEntriesLocalHeap="500"
           eternal="false"
           overflowToDisk="true"
           diskPersistent="true"
           timeToIdleSeconds="300"
           timeToLiveSeconds="600"
           diskExpiryThreadIntervalSeconds="1"
           memoryStoreEvictionPolicy="LFU">
    </cache>


    <cache name="sampleReplicatedCache1"
           maxEntriesLocalHeap="10"
           eternal="false"
           timeToIdleSeconds="100"
           timeToLiveSeconds="100">

        <cacheEventListenerFactory
                class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"/>
        <bootstrapCacheLoaderFactory
                class="net.sf.ehcache.distribution.RMIBootstrapCacheLoaderFactory"/>
    </cache>


    <cache name="sampleRepicatedCache2"
           maxEntriesLocalHeap="10"
           eternal="false"
           timeToIdleSeconds="100"
           timeToLiveSeconds="100">
        <cacheEventListenerFactory
                class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
                properties="replicateAsynchronously=false, replicatePuts=false,
                            replicatePutsViaCopy=false, replicateUpdates=true,
                            replicateUpdatesViaCopy=true, replicateRemovals=false"/>
    </cache>

    <cache name="sampleReplicatedCache3"
           maxEntriesLocalHeap="10"
           eternal="false"
           timeToIdleSeconds="100"
           timeToLiveSeconds="100">
        <cacheEventListenerFactory
                class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
                properties="asynchronousReplicationIntervalMillis=200"/>
        <persistence strategy="localTempSwap"/>
    </cache>

    <!--
    Sample Terracotta clustered cache named sampleTerracottaCache.
    This cache uses Terracotta to cluster the contents of the cache.
    -->
    <!--
    <cache name="sampleTerracottaCache"
           maxBytesLocalHeap="10m"
           eternal="false"
           timeToIdleSeconds="3600"
           timeToLiveSeconds="1800">
        <terracotta/>
    </cache>
    -->

    <!--
      Sample xa enabled cache named xaCache
    <cache name="xaCache"
           maxEntriesLocalHeap="500"
           eternal="false"
           timeToIdleSeconds="300"
           timeToLiveSeconds="600"
           diskExpiryThreadIntervalSeconds="1"
           transactionalMode="xa_strict">
    </cache>
    -->

    <!--
      Sample copy on both read and write cache named copyCache
      using the default (explicitly configured here as an example) ReadWriteSerializationCopyStrategy
      class could be any implementation of net.sf.ehcache.store.compound.CopyStrategy
    <cache name="copyCache"
           maxEntriesLocalHeap="500"
           eternal="false"
           timeToIdleSeconds="300"
           timeToLiveSeconds="600"
           diskExpiryThreadIntervalSeconds="1"
           copyOnRead="true"
           copyOnWrite="true">
        <copyStrategy class="net.sf.ehcache.store.compound.ReadWriteSerializationCopyStrategy" />
    </cache>
    -->
    <!--
      Sample, for Enterprise Ehcache only, demonstrating a tiered cache with in-memory, off-heap and disk stores. In this example the in-memory (on-heap) store is limited to 10,000 items ... which for example for 1k items would use 10MB of memory, the off-heap store is limited to 4GB and the disk store is unlimited in size.
    <cache name="tieredCache"
           maxEntriesLocalHeap="10000"
           eternal="false"
           timeToLiveSeconds="600"
           overflowToOffHeap="true"
           maxBytesLocalOffHeap="4g"
           diskExpiryThreadIntervalSeconds="1">
        <persistence strategy="localTempSwap"/>
     </cache>
    -->
    <!--
      Sample, for Enterprise Ehcache only, demonstrating a restartable cache with in-memory and off-heap stores.
    <cache name="restartableCache"
           maxEntriesLocalHeap="10000"
           eternal="true"
           overflowToOffHeap="true"
           maxBytesLocalOffHeap="4g"
         <persistence strategy="localRestartable"/>
     </cache>
     -->
</ehcache>

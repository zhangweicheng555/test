
1.正式环境：http://192.168.5.34:9200/



0.官网
https://www.elastic.co


注意  es的http端口是9200   tcp端口是9300

1.下载：
wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.2.tar.gz

2.bin目录下启动（不能使用root用户启动  这个注意）
./elasticsearch

3.查看是否正常启动
http://192.168.5.34:9200  结果不饿能访问  ，但是127.0.0.1  是可以的

4.解决外网ip访问                    (参考链接：https://blog.csdn.net/buzaiqq/article/details/67637731)
                           https://blog.csdn.net/qq_21387171/article/details/53577115
今天在虚拟机上安装了一个ES 5.2.2
结果curl "http://127.0.0.1:9200" 能够正常访问，可是使用外网ip就提示拒绝链接
解决办法：vim config/elasticsearch.yml
增加：network.host: 0.0.0.0   ------注意 这里面有个空格
重启问题解决

另外，个别虚拟机无法启动ES，查看日志如果有：
[2017-03-28T15:35:19,948][ERROR][o.e.b.Bootstrap          ] [kSH2rCN] node validation exception bootstrap checks failed
max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]
解决办法：切换root账户 vim /etc/sysctl.conf     如果不行  再改这个文件etc/security/limits.conf
增加一行  vm.max_map_count=655360
接着执行 sysctl -p
切回ES账户重新启动问题解决


正常访问

name	"83rriRF"
cluster_name	"elasticsearch"
cluster_uuid	"dvuWUqZ3R9mYzBIL4A6RgA"
version	
number	"5.5.2"
build_hash	"b2f0c09"
build_date	"2017-08-14T12:33:14.154Z"
build_snapshot	false
lucene_version	"6.6.0"
tagline	"You Know, for Search"


5.集群配置
  在elasticsearch.yml添加
  cluster.name: zwc    --master
  node.name: master
  node.master: true
  network.host: 127.0.0.1
  
  --slave
  cluster.name: zwc    
  node.name: slave1
  network.host: 192.168.233.22
  http.port: 8200
  discovery.zen.ping.unicast.hosts: ["192.168.233.22"]
  
  
6.查看集群的健康状态
http://192.168.5.34:9200/_cat/health?v
  

7.基本概念
  索引：含有相同属性的文档集合
  类型: 索引可以定义一个或多个类型，文档必须属于一个类型
  文档：可以被索引的基本数据单位
    
    

 索引相当于一个数据库，类型相当于一个表，文档相当于一条记录

索引：分片/备份  索引的名字必须要小写且不能有下划线

8.ES  api
api基本格式：http://<ip>:<port>/索引/类型/文档id
常用HTTP动词  GET/PUT/POST/DELETE

1.创建索引：  --这个就类似于数据库
PUT    --put方法  
http://192.168.5.34:9200/people    people是索引
{
    "settings": {  
    	"number_of_shards":3,--分片数
    	"number_of_replicas":1  --备份数
    },
    "mappings": {
        "man": {             --这个类型     就类相似与表
         	"properties":{   --类型的定义
         		"name":{"type":"text"},
         		"country":{"type":"keyword"},
         		"age":{"type":"integer"},
         		"date":{"type":"date","format":"yyyy-MM-dd HH:mm:ss"}
         	}
         },
        "women": { 
        	
        }
    }
}

2.插入   --这就是文档
PUT    --这种PUT方式  id需要我们自己指定
http://192.168.5.34:9200/people/man/1  --索引  类型  1是文档id
{
	"name":"zhangweicheng",
    "country":"北京",
    "age":28,
   	"date":"2018-09-09 12:12:00"
	
}

POST    --这种POST方式  id自动生成
http://192.168.5.34:9200/people/man  --索引  类型  1是文档id
{
	"name":"zhangsan",
    "country":"北京",
    "age":28,
   	"date":"2018-09-09 12:12:00"
}

结果：
{
    "_index": "people",
    "_type": "man",
    "_id": "AWYMKkpV_jO89HFLvWtD",
    "_version": 1,
    "result": "created",
    "_shards": {
        "total": 2,
        "successful": 1,
        "failed": 0
    },
    "created": true
}

3.修改文档
POST  
http://192.168.5.34:9200/people/man/1/_update    --man 索引   1是文档编号   _update 是修改的标记

{
	"doc":{   --要修改的内容  都写在  doc里面
		"name":"张涵涵"
	}
}

脚本语言的修改  先放一放

4.删除 
   删除文档  DELETE   http://192.168.5.34:9200/people/man/3
  //这个found是很关键的  
  {
    "found": false,
    "_index": "people",
    "_type": "man",
    "_id": "3",
    "_version": 1,
    "result": "not_found",
    "_shards": {
        "total": 2,
        "successful": 1,
        "failed": 0
    }
}
  
  
  //删除索引
  DELETE http://192.168.5.34:9200/people


5.查询
  
  --按照id查询  GET  http://192.168.5.34:9200/people/man/1  查找id为1的
  
  --条件查询  
     查询全部   POST  http://192.168.5.34:9200/people/_search
           {                      --全部查询
			"query":{  
				"match_all":{}     --返回全部的标记
			},
			"from":1,    --从哪里开始   注意是从0 开始的
			"size":9999  --返回多少条
		  }
		  
		  
         --============================================================
         {                      --关键词查询  单个字段查询
			"query":{  
				"match":{"name":"zhangweicheng"}     --返回全部的标记
			},
			"from":1,    --从哪里开始
			"size":9999  --返回多少条
		  }
                          
		===========================================================
		{                        --排序  可多个              
			"query":{  
				"match_all":{}    
			},
			"from":0,    
			"size":9999,
			"sort":[
				     {"age":{"order":"desc"}},
				      {"date":{"order":"desc"}}
			       ]
		  }



